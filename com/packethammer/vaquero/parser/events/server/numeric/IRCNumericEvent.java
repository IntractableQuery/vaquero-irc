/*
 * This represents a numeric event from the server. Numerics are used for a 
 * wide array of miscellaneous tasks that are not absolutely essential to
 * using IRC, although they are important.
 *
 * Subclasses of this class are smarter than the usual IRC event classes; these
 * can perform self-validation which can both initialize base instance variables
 * and ensure that the parser uses the correct event class for a numeric -- 
 * after all, a single numeric can have more than one event type!
 *
 * ARGS: <3-DIGIT NUMERIC STARTING AT 001> <TARGET NICKNAME (YOU)> [ADDITIONAL ARGUMENTS RELATIVE TO NUMERIC]
 */

package com.packethammer.vaquero.parser.events.server.numeric;

import com.packethammer.vaquero.util.protocol.IRCRawParameter;
import com.packethammer.vaquero.parser.events.IRCEvent;

public abstract class IRCNumericEvent extends IRCEvent {     
    // Side note:
    // I wanted to auto-generate classes that were children of IRCNumericEvent,
    // but doing so would be a real pain considering that the format of the numerics
    // listed in the RFCs still require human intervention to turn them into
    // classes. As it is, there is still the auto-generated list of irc
    // numerics, so things aren't that bad. Important numeric subclasses
    // will still be created over time.
    
    public IRCNumericEvent() {
    }    
    
    /**
     * Returns the numeric code the server has sent us.
     *
     * @return Numeric code between 1 and 999, inclusive.
     */
    public int getNumeric() {
        return Integer.parseInt(this.getCommandArgument());
    }
    
    /**
     * Returns the target of this numeric. This should always be you.
     *
     * @return A target nickname.
     */
    public String getTarget() {
        return this.getSecondArgument();
    }
    
    /**
     * Returns a parameter located within the numeric (zero-based).
     *
     * @return Numeric-specific parameter or null if it did not exist.
     */
    public String getNumericArg(int index) {
        return this.getArg(index + 2); // offset by 2 to skip <NUMERIC> <TARGETNICK>
    }

    /**
     * Returns an array representing the numeric arguments.
     */
    public IRCRawParameter[] getNumericArguments() {
        IRCRawParameter[] numArgs = new IRCRawParameter[this.numericArgumentCount()];
        System.arraycopy(this.getParameters(), 2, numArgs, 0, numArgs.length);
        return numArgs;
    }
    
    /**
     * Returns the first argument within the numeric.
     *
     * @return First numeric argument or null if none existed.
     */
    public String getNumericFirstArg() {
        return this.getNumericArg(0);
    }   
    
    /**
     * Returns the number of numeric arguments contained.
     *
     * @return Number of numeric arguments.
     */
    public int numericArgumentCount() {
        return this.parametersCount() - 2;
    }
    
    /**
     * Returns true if this numeric event is valid. This is useful for instantiating
     * an event and giving it a valid IRC numeric line, but then checking it to
     * make sure the line's contents are what are actually needed. This assumes
     * that the numeric is the same as the one this class handles.
     *
     * This method MUST be called before accessing the numeric instance in either
     * case, as it initializes important internal properties. The system parser will
     * handle this automatically.
     */
    public abstract boolean validate();
    
    
    /**
     * Returns the numeric that this class handles. It does NOT return the
     * numeric this class is currently representing. This method is useful
     * for the parser.
     *
     * @see #getNumeric()
     */
    public abstract int getHandledNumeric();
    
    public String toString() {
        return "NUMERIC: " + this.getNumeric();
    }

    
    
    
    
    
    //***********************************************************************
    // NOTE: THE FOLLOWING IS AUTOGENERATED CODE. DO NOT BOTHER MODIFYING IT.
    // Assuming this code ever reaches the public domain, please contact
    // the creator to figure out what to do here, or ask for a revision
    // or addition to the known numerics.
    //***********************************************************************
    
    
    
    
    

/**
 * FORMAT: '<WELCOME MESSAGE>'
 * - Despite RFC1459, the welcome message can really be anything. It isn't worth 
 *   trying to extract your own hostmask from it, unless it follows RFC1459 format 
 *   perfectly. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 001, RPL_WELCOME)
 * 
 * Other definition(s):
 * FORMAT: 'Welcome to the Internet Relay Network <nick>!<user>@<host>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 001, RPL_WELCOME)
 * 
 */
public static final int RPL_WELCOME = 001;


/**
 * FORMAT: 'Your host is <servername>, running version <ver>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 002, RPL_YOURHOST)
 * 
 */
public static final int RPL_YOURHOST = 002;


/**
 * FORMAT: 'This server was created <date>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 003, RPL_CREATED)
 * 
 */
public static final int RPL_CREATED = 003;


/**
 * FORMAT: '<servername> <version> <available user modes> <available channel modes>'
 * - The server sends Replies 001 to 004 to a user upon successful registration. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 004, RPL_MYINFO)
 * 
 */
public static final int RPL_MYINFO = 004;


/**
 * FORMAT: '<PARAMETER=VALUE ...>'
 * - Precise information on this numeric can be found on google and http://www.irc.org/tech_docs/005.html. 
 *   This is an important numeric used for informing the client of the server's support 
 *   for various options. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 005, RPL_ISUPPORT)
 * 
 * Other definition(s):
 * FORMAT: 'Try server <server name>, port <port number>'
 * - Sent by the server to a user to suggest an alternative server. This is often 
 *   used when the connection is refused because the server is already full. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 005, RPL_BOUNCE)
 * 
 */
public static final int RPL_ISUPPORT = 005;


/**
 * FORMAT: 'Try server <server name>, port <port number>'
 * - Sent by the server to a user to suggest an alternative server. This is often 
 *   used when the connection is refused because the server is already full. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 005, RPL_BOUNCE)
 * 
 * Other definition(s):
 * FORMAT: '<PARAMETER=VALUE ...>'
 * - Precise information on this numeric can be found on google and http://www.irc.org/tech_docs/005.html. 
 *   This is an important numeric used for informing the client of the server's support 
 *   for various options. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 005, RPL_ISUPPORT)
 * 
 */
public static final int RPL_BOUNCE = 005;


/**
 * FORMAT: 'Link <version & debug level> <destination><next server> V<protocol version><link uptime in seconds> <backstream sendq><upstream sendq>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 200, RPL_TRACELINK)
 * 
 */
public static final int RPL_TRACELINK = 200;


/**
 * FORMAT: 'Try. <class> <server>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 201, RPL_TRACECONNECTING)
 * 
 */
public static final int RPL_TRACECONNECTING = 201;


/**
 * FORMAT: 'H.S. <class> <server>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 202, RPL_TRACEHANDSHAKE)
 * 
 */
public static final int RPL_TRACEHANDSHAKE = 202;


/**
 * FORMAT: '???? <class> [<client IP address in dot form>]'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 203, RPL_TRACEUNKNOWN)
 * 
 */
public static final int RPL_TRACEUNKNOWN = 203;


/**
 * FORMAT: 'Oper <class> <nick>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 204, RPL_TRACEOPERATOR)
 * 
 */
public static final int RPL_TRACEOPERATOR = 204;


/**
 * FORMAT: 'User <class> <nick>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 205, RPL_TRACEUSER)
 * 
 */
public static final int RPL_TRACEUSER = 205;


/**
 * FORMAT: 'Serv <class> <int>S <int>C <server><nick!user|*!*>@<host|server> V<protocol version>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 206, RPL_TRACESERVER)
 * 
 */
public static final int RPL_TRACESERVER = 206;


/**
 * FORMAT: 'Service <class> <name> <type> <active type>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 207, RPL_TRACESERVICE)
 * 
 */
public static final int RPL_TRACESERVICE = 207;


/**
 * FORMAT: '<newtype> 0 <client name>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 208, RPL_TRACENEWTYPE)
 * 
 */
public static final int RPL_TRACENEWTYPE = 208;


/**
 * FORMAT: 'Class <class> <count>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 209, RPL_TRACECLASS)
 * 
 */
public static final int RPL_TRACECLASS = 209;


/**
 * FORMAT: 'Unused.'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 210, RPL_TRACERECONNECT)
 * 
 */
public static final int RPL_TRACERECONNECT = 210;


/**
 * FORMAT: '<linkname> <sendq> <sent messages> <sent Kbytes> <received messages> <received Kbytes> <time open>'
 * - reports statistics on a connection. <linkname> identifies the particular connection, 
 *   <sendq> is the amount of data that is queued and waiting to be sent <sent messages> 
 *   the number of messages sent, and <sent Kbytes> the amount of data sent, in Kbytes. 
 *   <received messages> and <received Kbytes> are the equivalent of <sent messages> 
 *   and <sent Kbytes> for received data, respectively. <time open> indicates how 
 *   long ago the connection was opened, in seconds. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 211, RPL_STATSLINKINFO)
 * 
 */
public static final int RPL_STATSLINKINFO = 211;


/**
 * FORMAT: '<command> <count> <byte count> <remote count>'
 * - reports statistics on commands usage. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 212, RPL_STATSCOMMANDS)
 * 
 */
public static final int RPL_STATSCOMMANDS = 212;


/**
 * FORMAT: '<stats letter> :End of STATS report'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 219, RPL_ENDOFSTATS)
 * 
 */
public static final int RPL_ENDOFSTATS = 219;


/**
 * FORMAT: '<user mode string>'
 * - To answer a query about a client's own mode, RPL_UMODEIS is sent back. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 221, RPL_UMODEIS)
 * 
 */
public static final int RPL_UMODEIS = 221;


/**
 * FORMAT: '<name> <server> <mask> <type> <hopcount> <info>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 234, RPL_SERVLIST)
 * 
 */
public static final int RPL_SERVLIST = 234;


/**
 * FORMAT: '<mask> <type> :End of service listing'
 * - When listing services in reply to a SERVLIST message, a server is required 
 *   to send the list back using the RPL_SERVLIST and RPL_SERVLISTEND messages. A 
 *   separate RPL_SERVLIST is sent for each service. After the services have been 
 *   listed (or if none present) a RPL_SERVLISTEND MUST be sent. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 235, RPL_SERVLISTEND)
 * 
 */
public static final int RPL_SERVLISTEND = 235;


/**
 * FORMAT: ':Server Up %d days %d:%02d:%02d'
 * - reports the server uptime. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 242, RPL_STATSUPTIME)
 * 
 */
public static final int RPL_STATSUPTIME = 242;


/**
 * FORMAT: 'O <hostmask> * <name>'
 * - reports the allowed hosts from where user may become IRC operators. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 243, RPL_STATSOLINE)
 * 
 */
public static final int RPL_STATSOLINE = 243;


/**
 * FORMAT: ' This reply, as with any reply having an extended text-based argument, is different on some servers. It is not worth encapsulating. irc reponds with this version of it (invisible instead of services).":There are <integer> users and <integer> invisible on <integer> servers'
 * - No description. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 251, RPL_LUSERCLIENT)
 * 
 * Other definition(s):
 * FORMAT: ':There are <integer> users and <integer> services on <integer> servers'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 251, RPL_LUSERCLIENT)
 * 
 */
public static final int RPL_LUSERCLIENT = 251;


/**
 * FORMAT: '<integer> :operator(s) online'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 252, RPL_LUSEROP)
 * 
 */
public static final int RPL_LUSEROP = 252;


/**
 * FORMAT: '<integer> :unknown connection(s)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 253, RPL_LUSERUNKNOWN)
 * 
 */
public static final int RPL_LUSERUNKNOWN = 253;


/**
 * FORMAT: '<integer> :channels formed'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 254, RPL_LUSERCHANNELS)
 * 
 */
public static final int RPL_LUSERCHANNELS = 254;


/**
 * FORMAT: ':I have <integer> clients and <integer> servers'
 * - In processing an LUSERS message, the server sends a set of replies from RPL_LUSERCLIENT, 
 *   RPL_LUSEROP, RPL_USERUNKNOWN, RPL_LUSERCHANNELS and RPL_LUSERME. When replying, 
 *   a server MUST send back RPL_LUSERCLIENT and RPL_LUSERME. The other replies are 
 *   only sent back if a non-zero count is found for them. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 255, RPL_LUSERME)
 * 
 */
public static final int RPL_LUSERME = 255;


/**
 * FORMAT: '<server> :Administrative info'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 256, RPL_ADMINME)
 * 
 */
public static final int RPL_ADMINME = 256;


/**
 * FORMAT: ':<admin info>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 257, RPL_ADMINLOC1)
 * 
 */
public static final int RPL_ADMINLOC1 = 257;


/**
 * FORMAT: ':<admin info>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 258, RPL_ADMINLOC2)
 * 
 */
public static final int RPL_ADMINLOC2 = 258;


/**
 * FORMAT: ':<admin info>'
 * - When replying to an ADMIN message, a server is expected to use replies RPL_ADMINME 
 *   through to RPL_ADMINEMAIL and provide a text message with each. For RPL_ADMINLOC1 
 *   a description of what city, state and country the server is in is expected, 
 *   followed by details of the institution (RPL_ADMINLOC2) and finally the administrative 
 *   contact for the server (an email address here is REQUIRED) in RPL_ADMINEMAIL. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 259, RPL_ADMINEMAIL)
 * 
 */
public static final int RPL_ADMINEMAIL = 259;


/**
 * FORMAT: 'File <logfile> <debug level>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 261, RPL_TRACELOG)
 * 
 */
public static final int RPL_TRACELOG = 261;


/**
 * FORMAT: '<server name> <version & debug level> :End of TRACE'
 * - The RPL_TRACE* are all returned by the server in response to the TRACE message. 
 *   How many are returned is dependent on the TRACE message and whether it was sent 
 *   by an operator or not. There is no predefined order for which occurs first. 
 *   Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and RPL_TRACEHANDSHAKE are all 
 *   used for connections which have not been fully established and are either unknown, 
 *   still attempting to connect or in the process of completing the 'server handshake'. 
 *   RPL_TRACELINK is sent by any server which handles a TRACE message and has to 
 *   pass it on to another server. The list of RPL_TRACELINKs sent in response to 
 *   a TRACE command traversing the IRC network should reflect the actual connectivity 
 *   of the servers themselves along that path. RPL_TRACENEWTYPE is to be used for 
 *   any connection which does not fit in the other categories but is being displayed 
 *   anyway. RPL_TRACEEND is sent to indicate the end of the list. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 262, RPL_TRACEEND)
 * 
 */
public static final int RPL_TRACEEND = 262;


/**
 * FORMAT: '<command> :Please wait a while and try again.'
 * - When a server drops a command without processing it, it MUST use the reply 
 *   RPL_TRYAGAIN to inform the originating client. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 263, RPL_TRYAGAIN)
 * 
 */
public static final int RPL_TRYAGAIN = 263;


/**
 * FORMAT: '<nick> :<away message>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 301, RPL_AWAY)
 * 
 */
public static final int RPL_AWAY = 301;


/**
 * FORMAT: ':*1<reply> *( " " <reply> )'
 * - Reply format used by USERHOST to list replies to the query list. The reply 
 *   string is composed as follows: reply = nickname [ "*" ] "=" ( "+" / "-" ) hostname 
 *   The '*' indicates whether the client has registered as an Operator. The '-' 
 *   or '+' characters represent whether the client has set an AWAY message or not 
 *   respectively. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 302, RPL_USERHOST)
 * 
 */
public static final int RPL_USERHOST = 302;


/**
 * FORMAT: ':*1<nick> *( " " <nick> )'
 * - Reply format used by ISON to list replies to the query list. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 303, RPL_ISON)
 * 
 */
public static final int RPL_ISON = 303;


/**
 * FORMAT: ':You are no longer marked as being away'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 305, RPL_UNAWAY)
 * 
 */
public static final int RPL_UNAWAY = 305;


/**
 * FORMAT: ':You have been marked as being away'
 * - These replies are used with the AWAY command (if allowed). RPL_AWAY is sent 
 *   to any client sending a PRIVMSG to a client which is away. RPL_AWAY is only 
 *   sent by the server to which the client is connected. Replies RPL_UNAWAY and 
 *   RPL_NOWAWAY are sent when the client removes and sets an AWAY message. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 306, RPL_NOWAWAY)
 * 
 */
public static final int RPL_NOWAWAY = 306;


/**
 * FORMAT: '<nick> <user> <host> * :<real name>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 311, RPL_WHOISUSER)
 * 
 */
public static final int RPL_WHOISUSER = 311;


/**
 * FORMAT: '<nick> <server> :<server info>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 312, RPL_WHOISSERVER)
 * 
 */
public static final int RPL_WHOISSERVER = 312;


/**
 * FORMAT: '<nick> :is an IRC operator'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 313, RPL_WHOISOPERATOR)
 * 
 */
public static final int RPL_WHOISOPERATOR = 313;


/**
 * FORMAT: '<nick> <user> <host> * :<real name>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 314, RPL_WHOWASUSER)
 * 
 */
public static final int RPL_WHOWASUSER = 314;


/**
 * FORMAT: '<name> :End of WHO list'
 * - The RPL_WHOREPLY and RPL_ENDOFWHO pair are used to answer a WHO message. The 
 *   RPL_WHOREPLY is only sent if there is an appropriate match to the WHO query. 
 *   If there is a list of parameters supplied with a WHO message, a RPL_ENDOFWHO 
 *   MUST be sent after processing each list item with <name> being the item. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 315, RPL_ENDOFWHO)
 * 
 */
public static final int RPL_ENDOFWHO = 315;


/**
 * FORMAT: '<nick> <integer> :seconds idle'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 317, RPL_WHOISIDLE)
 * 
 */
public static final int RPL_WHOISIDLE = 317;


/**
 * FORMAT: '<nick> :End of WHOIS list'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 318, RPL_ENDOFWHOIS)
 * 
 */
public static final int RPL_ENDOFWHOIS = 318;


/**
 * FORMAT: '<nick> :*( ( "@" / "+" ) <channel> " " )'
 * - Replies 311 313, 317 319 are all replies generated in response to a WHOIS 
 *   message. Given that there are enough parameters present, the answering server 
 *   MUST either formulate a reply out of the above numerics (if the query nick is 
 *   found) or return an error reply. The '*' in RPL_WHOISUSER is there as the literal 
 *   character and not as a wild card. For each reply set, only RPL_WHOISCHANNELS 
 *   may appear more than once (for long lists of channel names). The '@' and '+' 
 *   characters next to the channel name indicate whether a client is a channel operator 
 *   or has been granted permission to speak on a moderated channel. The RPL_ENDOFWHOIS 
 *   reply is used to mark the end of processing a WHOIS message. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 319, RPL_WHOISCHANNELS)
 * 
 */
public static final int RPL_WHOISCHANNELS = 319;


/**
 * FORMAT: 'Obsolete. Not used.'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 321, RPL_LISTSTART)
 * 
 */
public static final int RPL_LISTSTART = 321;


/**
 * FORMAT: '<channel> <# visible> :<topic>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 322, RPL_LIST)
 * 
 */
public static final int RPL_LIST = 322;


/**
 * FORMAT: ':End of LIST'
 * - Replies RPL_LIST, RPL_LISTEND mark the actual replies with data and end of 
 *   the server's response to a LIST command. If there are no channels available 
 *   to return, only the end reply MUST be sent. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 323, RPL_LISTEND)
 * 
 */
public static final int RPL_LISTEND = 323;


/**
 * FORMAT: '<channel> <mode> <mode params>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 324, RPL_CHANNELMODEIS)
 * 
 */
public static final int RPL_CHANNELMODEIS = 324;


/**
 * FORMAT: '<channel> <nickname>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 325, RPL_UNIQOPIS)
 * 
 */
public static final int RPL_UNIQOPIS = 325;


/**
 * FORMAT: '<channel> :No topic is set'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 331, RPL_NOTOPIC)
 * 
 */
public static final int RPL_NOTOPIC = 331;


/**
 * FORMAT: '<channel> :<topic>'
 * - When sending a TOPIC message to determine the channel topic, one of two replies 
 *   is sent. If the topic is set, RPL_TOPIC is sent back else RPL_NOTOPIC. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 332, RPL_TOPIC)
 * 
 */
public static final int RPL_TOPIC = 332;


/**
 * FORMAT: '<channel> <topic setter nick/host> <time>'
 * - This is an ircu numeric that appears to have become popular with other servers. 
 *   It displays the last topic setter for a channel, and the time the topic was 
 *   set. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 333, RPL_TOPICWHOTIME)
 * 
 */
public static final int RPL_TOPICWHOTIME = 333;


/**
 * FORMAT: '<channel> <nick>'
 * - Returned by the server to indicate that the attempted INVITE message was successful 
 *   and is being passed onto the end client. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 341, RPL_INVITING)
 * 
 */
public static final int RPL_INVITING = 341;


/**
 * FORMAT: '<user> :Summoning user to IRC'
 * - Returned by a server answering a SUMMON message to indicate that it is summoning 
 *   that user. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 342, RPL_SUMMONING)
 * 
 */
public static final int RPL_SUMMONING = 342;


/**
 * FORMAT: '<channel> <invitemask>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 346, RPL_INVITELIST)
 * 
 */
public static final int RPL_INVITELIST = 346;


/**
 * FORMAT: '<channel> :End of channel invite list'
 * - When listing the 'invitations masks' for a given channel, a server is required 
 *   to send the list back using the RPL_INVITELIST and RPL_ENDOFINVITELIST messages. 
 *   A separate RPL_INVITELIST is sent for each active mask. After the masks have 
 *   been listed (or if none present) a RPL_ENDOFINVITELIST MUST be sent. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 347, RPL_ENDOFINVITELIST)
 * 
 */
public static final int RPL_ENDOFINVITELIST = 347;


/**
 * FORMAT: '<channel> <exceptionmask>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 348, RPL_EXCEPTLIST)
 * 
 */
public static final int RPL_EXCEPTLIST = 348;


/**
 * FORMAT: '<channel> :End of channel exception list'
 * - When listing the 'exception masks' for a given channel, a server is required 
 *   to send the list back using the RPL_EXCEPTLIST and RPL_ENDOFEXCEPTLIST messages. 
 *   A separate RPL_EXCEPTLIST is sent for each active mask. After the masks have 
 *   been listed (or if none present) a RPL_ENDOFEXCEPTLIST MUST be sent. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 349, RPL_ENDOFEXCEPTLIST)
 * 
 */
public static final int RPL_ENDOFEXCEPTLIST = 349;


/**
 * FORMAT: '<version>.<debuglevel> <server> :<comments>'
 * - Reply by the server showing its version details. The <version> is the version 
 *   of the software being used (including any patchlevel revisions) and the <debuglevel> 
 *   is used to indicate if the server is running in "debug mode". The "comments" 
 *   field may contain any comments about the version or further version details. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 351, RPL_VERSION)
 * 
 */
public static final int RPL_VERSION = 351;


/**
 * FORMAT: '<channel> <user> <host> <server> <nick>( "H" / "G" > ["*"] [ ( "@" / "+" ) ]:<hopcount> <real name>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 352, RPL_WHOREPLY)
 * 
 */
public static final int RPL_WHOREPLY = 352;


/**
 * FORMAT: '( '=' / '*' / '@' ) <channel>:[ '@' / '+' ] <nick> *( ' ' [ '@' / '+' ] <nick> )'
 * - The "@" is used for secret channels, "*" for private channels, and "=" for 
 *   others (public channels). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 353, RPL_NAMREPLY)
 * 
 */
public static final int RPL_NAMREPLY = 353;


/**
 * FORMAT: '<Fields...>'
 * - This is an ircu numeric (information in ircu's docs/readme.who). See the WHOX 
 *   command class for more information on this numeric. 
 * FROM: 'MISC. [POPULAR USAGE/VAQUERO]' (as numeric 354, RPL_WHOXREPLY)
 * 
 */
public static final int RPL_WHOXREPLY = 354;


/**
 * FORMAT: '<mask> <server> :<hopcount> <server info>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 364, RPL_LINKS)
 * 
 */
public static final int RPL_LINKS = 364;


/**
 * FORMAT: '<mask> :End of LINKS list'
 * - In replying to the LINKS message, a server MUST send replies back using the 
 *   RPL_LINKS numeric and mark the end of the list using an RPL_ENDOFLINKS reply. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 365, RPL_ENDOFLINKS)
 * 
 */
public static final int RPL_ENDOFLINKS = 365;


/**
 * FORMAT: '<channel> :End of NAMES list'
 * - To reply to a NAMES message, a reply pair consisting of RPL_NAMREPLY and RPL_ENDOFNAMES 
 *   is sent by the server back to the client. If there is no channel found as in 
 *   the query, then only RPL_ENDOFNAMES is returned. The exception to this is when 
 *   a NAMES message is sent with no parameters and all visible channels and contents 
 *   are sent back in a series of RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to 
 *   mark the end. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 366, RPL_ENDOFNAMES)
 * 
 */
public static final int RPL_ENDOFNAMES = 366;


/**
 * FORMAT: '<channel> <banmask>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 367, RPL_BANLIST)
 * 
 */
public static final int RPL_BANLIST = 367;


/**
 * FORMAT: '<channel> :End of channel ban list'
 * - When listing the active 'bans' for a given channel, a server is required to 
 *   send the list back using the RPL_BANLIST and RPL_ENDOFBANLIST messages. A separate 
 *   RPL_BANLIST is sent for each active banmask. After the banmasks have been listed 
 *   (or if none present) a RPL_ENDOFBANLIST MUST be sent. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 368, RPL_ENDOFBANLIST)
 * 
 */
public static final int RPL_ENDOFBANLIST = 368;


/**
 * FORMAT: '<nick> :End of WHOWAS'
 * - When replying to a WHOWAS message, a server MUST use the replies RPL_WHOWASUSER, 
 *   RPL_WHOISSERVER or ERR_WASNOSUCHNICK for each nickname in the presented list. 
 *   At the end of all reply batches, there MUST be RPL_ENDOFWHOWAS (even if there 
 *   was only one reply and it was an error). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 369, RPL_ENDOFWHOWAS)
 * 
 */
public static final int RPL_ENDOFWHOWAS = 369;


/**
 * FORMAT: ':<string>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 371, RPL_INFO)
 * 
 */
public static final int RPL_INFO = 371;


/**
 * FORMAT: ':- <text>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 372, RPL_MOTD)
 * 
 */
public static final int RPL_MOTD = 372;


/**
 * FORMAT: ':End of INFO list'
 * - A server responding to an INFO message is required to send all its 'info' 
 *   in a series of RPL_INFO messages with a RPL_ENDOFINFO reply to indicate the 
 *   end of the replies. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 374, RPL_ENDOFINFO)
 * 
 */
public static final int RPL_ENDOFINFO = 374;


/**
 * FORMAT: ':- <server> Message of the day - '
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 375, RPL_MOTDSTART)
 * 
 */
public static final int RPL_MOTDSTART = 375;


/**
 * FORMAT: ':End of MOTD command'
 * - When responding to the MOTD message and the MOTD file is found, the file is 
 *   displayed line by line, with each line no longer than 80 characters, using RPL_MOTD 
 *   format replies. These MUST be surrounded by a RPL_MOTDSTART (before the RPL_MOTDs) 
 *   and an RPL_ENDOFMOTD (after). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 376, RPL_ENDOFMOTD)
 * 
 */
public static final int RPL_ENDOFMOTD = 376;


/**
 * FORMAT: ':You are now an IRC operator'
 * - RPL_YOUREOPER is sent back to a client which has just successfully issued 
 *   an OPER message and gained operator status. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 381, RPL_YOUREOPER)
 * 
 */
public static final int RPL_YOUREOPER = 381;


/**
 * FORMAT: '<config file> :Rehashing'
 * - If the REHASH option is used and an operator sends a REHASH message, an RPL_REHASHING 
 *   is sent back to the operator. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 382, RPL_REHASHING)
 * 
 */
public static final int RPL_REHASHING = 382;


/**
 * FORMAT: 'You are service <servicename>'
 * - Sent by the server to a service upon successful registration. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 383, RPL_YOURESERVICE)
 * 
 */
public static final int RPL_YOURESERVICE = 383;


/**
 * FORMAT: '<server> :<string showing server's local time>'
 * - When replying to the TIME message, a server MUST send the reply using the 
 *   RPL_TIME format above. The string showing the time need only contain the correct 
 *   day and time there. There is no further requirement for the time string. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 391, RPL_TIME)
 * 
 */
public static final int RPL_TIME = 391;


/**
 * FORMAT: ':UserID Terminal Host'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 392, RPL_USERSSTART)
 * 
 */
public static final int RPL_USERSSTART = 392;


/**
 * FORMAT: ':<username> <ttyline> <hostname>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 393, RPL_USERS)
 * 
 */
public static final int RPL_USERS = 393;


/**
 * FORMAT: ':End of users'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 394, RPL_ENDOFUSERS)
 * 
 */
public static final int RPL_ENDOFUSERS = 394;


/**
 * FORMAT: ':Nobody logged in'
 * - If the USERS message is handled by a server, the replies RPL_USERSTART, RPL_USERS, 
 *   RPL_ENDOFUSERS and RPL_NOUSERS are used. RPL_USERSSTART MUST be sent first, 
 *   following by either a sequence of RPL_USERS or a single RPL_NOUSER. Following 
 *   this is RPL_ENDOFUSERS. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 395, RPL_NOUSERS)
 * 
 */
public static final int RPL_NOUSERS = 395;


/**
 * FORMAT: '<nickname> :No such nick/channel'
 * - Used to indicate the nickname parameter supplied to a command is currently 
 *   unused. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 401, ERR_NOSUCHNICK)
 * 
 * Other definition(s):
 * FORMAT: '<nickname> :No such nick/channel'
 * - Used to indicate the nickname parameter supplied to a command is currently 
 *   unused. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 401, ERR_NOSUCHNICK)
 * 
 */
public static final int ERR_NOSUCHNICK = 401;


/**
 * FORMAT: '<server name> :No such server'
 * - Used to indicate the server name given currently does not exist. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 402, ERR_NOSUCHSERVER)
 * 
 * Other definition(s):
 * FORMAT: '<server name> :No such server'
 * - Used to indicate the server name given currently doesn't exist. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 402, ERR_NOSUCHSERVER)
 * 
 */
public static final int ERR_NOSUCHSERVER = 402;


/**
 * FORMAT: '<channel name> :No such channel'
 * - Used to indicate the given channel name is invalid. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 403, ERR_NOSUCHCHANNEL)
 * 
 * Other definition(s):
 * FORMAT: '<channel name> :No such channel'
 * - Used to indicate the given channel name is invalid. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 403, ERR_NOSUCHCHANNEL)
 * 
 */
public static final int ERR_NOSUCHCHANNEL = 403;


/**
 * FORMAT: '<channel name> :Cannot send to channel'
 * - Sent to a user who is either (a) not on a channel which is mode +n or (b) 
 *   not a chanop (or mode +v) on a channel which has mode +m set or where the user 
 *   is banned and is trying to send a PRIVMSG message to that channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 404, ERR_CANNOTSENDTOCHAN)
 * 
 * Other definition(s):
 * FORMAT: '<channel name> :Cannot send to channel'
 * - Sent to a user who is either (a) not on a channel which is mode +n or (b) 
 *   not a chanop (or mode +v) on a channel which has mode +m set and is trying to 
 *   send a PRIVMSG message to that channel. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 404, ERR_CANNOTSENDTOCHAN)
 * 
 */
public static final int ERR_CANNOTSENDTOCHAN = 404;


/**
 * FORMAT: '<channel name> :You have joined too many channels'
 * - Sent to a user when they have joined the maximum number of allowed channels 
 *   and they try to join another channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 405, ERR_TOOMANYCHANNELS)
 * 
 * Other definition(s):
 * FORMAT: '<channel name> :You have joined too many channels'
 * - Sent to a user when they have joined the maximum number of allowed channels 
 *   and they try to join another channel. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 405, ERR_TOOMANYCHANNELS)
 * 
 */
public static final int ERR_TOOMANYCHANNELS = 405;


/**
 * FORMAT: '<nickname> :There was no such nickname'
 * - Returned by WHOWAS to indicate there is no history information for that nickname. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 406, ERR_WASNOSUCHNICK)
 * 
 * Other definition(s):
 * FORMAT: '<nickname> :There was no such nickname'
 * - Returned by WHOWAS to indicate there is no history information for that nickname. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 406, ERR_WASNOSUCHNICK)
 * 
 */
public static final int ERR_WASNOSUCHNICK = 406;


/**
 * FORMAT: '<target> :<error code> recipients. <abort message>'
 * - Returned to a client which is attempting to send a PRIVMSG/NOTICE using the 
 *   user@host destination format and for a user@host which has several occurrences. 
 *   Returned to a client which trying to send a PRIVMSG/NOTICE to too many recipients. 
 *   Returned to a client which is attempting to JOIN a safe channel using the shortname 
 *   when there are more than one such channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 407, ERR_TOOMANYTARGETS)
 * 
 * Other definition(s):
 * FORMAT: '<target> :Duplicate recipients. No message delivered'
 * - Returned to a client which is attempting to send a PRIVMSG/NOTICE using the 
 *   user@host destination format and for a user@host which has several occurrences. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 407, ERR_TOOMANYTARGETS)
 * 
 */
public static final int ERR_TOOMANYTARGETS = 407;


/**
 * FORMAT: '<service name> :No such service'
 * - Returned to a client which is attempting to send a SQUERY to a service which 
 *   does not exist. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 408, ERR_NOSUCHSERVICE)
 * 
 */
public static final int ERR_NOSUCHSERVICE = 408;


/**
 * FORMAT: ':No origin specified'
 * - PING or PONG message missing the originator parameter. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 409, ERR_NOORIGIN)
 * 
 * Other definition(s):
 * FORMAT: ':No origin specified'
 * - PING or PONG message missing the originator parameter which is required since 
 *   these commands must work without valid prefixes. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 409, ERR_NOORIGIN)
 * 
 */
public static final int ERR_NOORIGIN = 409;


/**
 * FORMAT: ':No recipient given (<command>)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 411, ERR_NORECIPIENT)
 * 
 * Other definition(s):
 * FORMAT: ':No recipient given (<command>)'
 * - No description. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 411, ERR_NORECIPIENT)
 * 
 */
public static final int ERR_NORECIPIENT = 411;


/**
 * FORMAT: ':No text to send'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 412, ERR_NOTEXTTOSEND)
 * 
 * Other definition(s):
 * FORMAT: ':No text to send'
 * - No description. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 412, ERR_NOTEXTTOSEND)
 * 
 */
public static final int ERR_NOTEXTTOSEND = 412;


/**
 * FORMAT: '<mask> :No toplevel domain specified'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 413, ERR_NOTOPLEVEL)
 * 
 * Other definition(s):
 * FORMAT: '<mask> :No toplevel domain specified'
 * - No description. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 413, ERR_NOTOPLEVEL)
 * 
 */
public static final int ERR_NOTOPLEVEL = 413;


/**
 * FORMAT: '<mask> :Wildcard in toplevel domain'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 414, ERR_WILDTOPLEVEL)
 * 
 * Other definition(s):
 * FORMAT: '<mask> :Wildcard in toplevel domain'
 * - 412 414 are returned by PRIVMSG to indicate that the message wasn't delivered 
 *   for some reason. ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that are returned 
 *   when an invalid use of "PRIVMSG $<server>" or "PRIVMSG #<host>" is attempted. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 414, ERR_WILDTOPLEVEL)
 * 
 */
public static final int ERR_WILDTOPLEVEL = 414;


/**
 * FORMAT: '<mask> :Bad Server/host mask'
 * - 412 415 are returned by PRIVMSG to indicate that the message wasn't delivered 
 *   for some reason. ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that are returned 
 *   when an invalid use of "PRIVMSG $<server>" or "PRIVMSG #<host>" is attempted. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 415, ERR_BADMASK)
 * 
 */
public static final int ERR_BADMASK = 415;


/**
 * FORMAT: '<command> :Unknown command'
 * - Returned to a registered client to indicate that the command sent is unknown 
 *   by the server. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 421, ERR_UNKNOWNCOMMAND)
 * 
 * Other definition(s):
 * FORMAT: '<command> :Unknown command'
 * - Returned to a registered client to indicate that the command sent is unknown 
 *   by the server. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 421, ERR_UNKNOWNCOMMAND)
 * 
 */
public static final int ERR_UNKNOWNCOMMAND = 421;


/**
 * FORMAT: ':MOTD File is missing'
 * - Server's MOTD file could not be opened by the server. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 422, ERR_NOMOTD)
 * 
 * Other definition(s):
 * FORMAT: ':MOTD File is missing'
 * - Server's MOTD file could not be opened by the server. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 422, ERR_NOMOTD)
 * 
 */
public static final int ERR_NOMOTD = 422;


/**
 * FORMAT: '<server> :No administrative info available'
 * - Returned by a server in response to an ADMIN message when there is an error 
 *   in finding the appropriate information. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 423, ERR_NOADMININFO)
 * 
 * Other definition(s):
 * FORMAT: '<server> :No administrative info available'
 * - Returned by a server in response to an ADMIN message when there is an error 
 *   in finding the appropriate information. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 423, ERR_NOADMININFO)
 * 
 */
public static final int ERR_NOADMININFO = 423;


/**
 * FORMAT: ':File error doing <file op> on <file>'
 * - Generic error message used to report a failed file operation during the processing 
 *   of a message. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 424, ERR_FILEERROR)
 * 
 * Other definition(s):
 * FORMAT: ':File error doing <file op> on <file>'
 * - Generic error message used to report a failed file operation during the processing 
 *   of a message. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 424, ERR_FILEERROR)
 * 
 */
public static final int ERR_FILEERROR = 424;


/**
 * FORMAT: ':No nickname given'
 * - Returned when a nickname parameter expected for a command and isn't found. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 431, ERR_NONICKNAMEGIVEN)
 * 
 * Other definition(s):
 * FORMAT: ':No nickname given'
 * - Returned when a nickname parameter expected for a command and isn't found. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 431, ERR_NONICKNAMEGIVEN)
 * 
 */
public static final int ERR_NONICKNAMEGIVEN = 431;


/**
 * FORMAT: '<nick> :Erroneous nickname'
 * - Returned after receiving a NICK message which contains characters which do 
 *   not fall in the defined set. See section 2.3.1 for details on valid nicknames. 
 *   This numeric is misspelled in its original form. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 432, ERR_ERRONEOUSNICKNAME)
 * 
 * Other definition(s):
 * FORMAT: '<nick> :Erroneus nickname'
 * - Returned after receiving a NICK message which contains characters which do 
 *   not fall in the defined set. See section x.x.x for details on valid nicknames. 
 *   This numeric is misspelled in its original form. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 432, ERR_ERRONEOUSNICKNAME)
 * 
 */
public static final int ERR_ERRONEOUSNICKNAME = 432;


/**
 * FORMAT: '<nick> :Nickname is already in use'
 * - Returned when a NICK message is processed that results in an attempt to change 
 *   to a currently existing nickname. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 433, ERR_NICKNAMEINUSE)
 * 
 * Other definition(s):
 * FORMAT: '<nick> :Nickname is already in use'
 * - Returned when a NICK message is processed that results in an attempt to change 
 *   to a currently existing nickname. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 433, ERR_NICKNAMEINUSE)
 * 
 */
public static final int ERR_NICKNAMEINUSE = 433;


/**
 * FORMAT: '<nick> :Nickname collision KILL from <user>@<host>'
 * - Returned by a server to a client when it detects a nickname collision (registered 
 *   of a NICK that already exists by another server). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 436, ERR_NICKCOLLISION)
 * 
 * Other definition(s):
 * FORMAT: '<nick> :Nickname collision KILL'
 * - Returned by a server to a client when it detects a nickname collision (registered 
 *   of a NICK that already exists by another server). 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 436, ERR_NICKCOLLISION)
 * 
 */
public static final int ERR_NICKCOLLISION = 436;


/**
 * FORMAT: '<nick/channel> :Nick/channel is temporarily unavailable'
 * - Returned by a server to a user trying to join a channel currently blocked 
 *   by the channel delay mechanism. Returned by a server to a user trying to change 
 *   nickname when the desired nickname is blocked by the nick delay mechanism. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 437, ERR_UNAVAILRESOURCE)
 * 
 */
public static final int ERR_UNAVAILRESOURCE = 437;


/**
 * FORMAT: '<nick> <channel> :They aren't on that channel'
 * - Returned by the server to indicate that the target user of the command is 
 *   not on the given channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 441, ERR_USERNOTINCHANNEL)
 * 
 * Other definition(s):
 * FORMAT: '<nick> <channel> :They aren't on that channel'
 * - Returned by the server to indicate that the target user of the command is 
 *   not on the given channel. 
 * FROM: 'RFC-1459 [ORIGINAL IRC RFC]' (as numeric 441, ERR_USERNOTINCHANNEL)
 * 
 */
public static final int ERR_USERNOTINCHANNEL = 441;


/**
 * FORMAT: '<channel> :You're not on that channel'
 * - Returned by the server whenever a client tries to perform a channel affecting 
 *   command for which the client isn't a member. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 442, ERR_NOTONCHANNEL)
 * 
 */
public static final int ERR_NOTONCHANNEL = 442;


/**
 * FORMAT: '<user> <channel> :is already on channel'
 * - Returned when a client tries to invite a user to a channel they are already 
 *   on. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 443, ERR_USERONCHANNEL)
 * 
 */
public static final int ERR_USERONCHANNEL = 443;


/**
 * FORMAT: '<user> :User not logged in'
 * - Returned by the summon after a SUMMON command for a user was unable to be 
 *   performed since they were not logged in. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 444, ERR_NOLOGIN)
 * 
 */
public static final int ERR_NOLOGIN = 444;


/**
 * FORMAT: ':SUMMON has been disabled'
 * - Returned as a response to the SUMMON command. MUST be returned by any server 
 *   which doesn't implement it. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 445, ERR_SUMMONDISABLED)
 * 
 */
public static final int ERR_SUMMONDISABLED = 445;


/**
 * FORMAT: ':USERS has been disabled'
 * - Returned as a response to the USERS command. MUST be returned by any server 
 *   which does not implement it. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 446, ERR_USERSDISABLED)
 * 
 */
public static final int ERR_USERSDISABLED = 446;


/**
 * FORMAT: ':You have not registered'
 * - Returned by the server to indicate that the client MUST be registered before 
 *   the server will allow it to be parsed in detail. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 451, ERR_NOTREGISTERED)
 * 
 */
public static final int ERR_NOTREGISTERED = 451;


/**
 * FORMAT: '<command> :Not enough parameters'
 * - Returned by the server by numerous commands to indicate to the client that 
 *   it didn't supply enough parameters. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 461, ERR_NEEDMOREPARAMS)
 * 
 */
public static final int ERR_NEEDMOREPARAMS = 461;


/**
 * FORMAT: ':Unauthorized command (already registered)'
 * - This numeric is misspelled in its original form. Returned by the server to 
 *   any link which tries to change part of the registered details (such as password 
 *   or user details from second USER message). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 462, ERR_ALREADYREGISTERED)
 * 
 */
public static final int ERR_ALREADYREGISTERED = 462;


/**
 * FORMAT: ':Your host isn't among the privileged'
 * - Returned to a client which attempts to register with a server which does not 
 *   been setup to allow connections from the host the attempted connection is tried. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 463, ERR_NOPERMFORHOST)
 * 
 */
public static final int ERR_NOPERMFORHOST = 463;


/**
 * FORMAT: ':Password incorrect'
 * - Returned to indicate a failed attempt at registering a connection for which 
 *   a password was required and was either not given or incorrect. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 464, ERR_PASSWDMISMATCH)
 * 
 */
public static final int ERR_PASSWDMISMATCH = 464;


/**
 * FORMAT: ':You are banned from this server'
 * - Returned after an attempt to connect and register yourself with a server which 
 *   has been setup to explicitly deny connections to you. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 465, ERR_YOUREBANNEDCREEP)
 * 
 */
public static final int ERR_YOUREBANNEDCREEP = 465;


/**
 * FORMAT: '- Sent by a server to a user to inform that access to theserver will soon be denied.'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 466, ERR_YOUWILLBEBANNED)
 * 
 */
public static final int ERR_YOUWILLBEBANNED = 466;


/**
 * FORMAT: '<channel> :Channel key already set'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 467, ERR_KEYSET)
 * 
 */
public static final int ERR_KEYSET = 467;


/**
 * FORMAT: '<channel> :Cannot join channel (+l)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 471, ERR_CHANNELISFULL)
 * 
 */
public static final int ERR_CHANNELISFULL = 471;


/**
 * FORMAT: '<char> :is unknown mode char to me for <channel>'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 472, ERR_UNKNOWNMODE)
 * 
 */
public static final int ERR_UNKNOWNMODE = 472;


/**
 * FORMAT: '<channel> :Cannot join channel (+i)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 473, ERR_INVITEONLYCHAN)
 * 
 */
public static final int ERR_INVITEONLYCHAN = 473;


/**
 * FORMAT: '<channel> :Cannot join channel (+b)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 474, ERR_BANNEDFROMCHAN)
 * 
 */
public static final int ERR_BANNEDFROMCHAN = 474;


/**
 * FORMAT: '<channel> :Cannot join channel (+k)'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 475, ERR_BADCHANNELKEY)
 * 
 */
public static final int ERR_BADCHANNELKEY = 475;


/**
 * FORMAT: '<channel> :Bad Channel Mask'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 476, ERR_BADCHANMASK)
 * 
 */
public static final int ERR_BADCHANMASK = 476;


/**
 * FORMAT: '<channel> :Channel doesn't support modes'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 477, ERR_NOCHANMODES)
 * 
 */
public static final int ERR_NOCHANMODES = 477;


/**
 * FORMAT: '<channel> <char> :Channel list is full'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 478, ERR_BANLISTFULL)
 * 
 */
public static final int ERR_BANLISTFULL = 478;


/**
 * FORMAT: ':Permission Denied- You're not an IRC operator'
 * - Any command requiring operator privileges to operate MUST return this error 
 *   to indicate the attempt was unsuccessful. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 481, ERR_NOPRIVILEGES)
 * 
 */
public static final int ERR_NOPRIVILEGES = 481;


/**
 * FORMAT: '<channel> :You're not channel operator'
 * - Any command requiring 'chanop' privileges (such as MODE messages) MUST return 
 *   this error if the client making the attempt is not a chanop on the specified 
 *   channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 482, ERR_CHANOPRIVSNEEDED)
 * 
 */
public static final int ERR_CHANOPRIVSNEEDED = 482;


/**
 * FORMAT: ':You can't kill a server!'
 * - Any attempts to use the KILL command on a server are to be refused and this 
 *   error returned directly to the client. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 483, ERR_CANTKILLSERVER)
 * 
 */
public static final int ERR_CANTKILLSERVER = 483;


/**
 * FORMAT: ':Your connection is restricted!'
 * - Sent by the server to a user upon connection to indicate the restricted nature 
 *   of the connection (user mode "+r"). 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 484, ERR_RESTRICTED)
 * 
 */
public static final int ERR_RESTRICTED = 484;


/**
 * FORMAT: ':You're not the original channel operator'
 * - Any MODE requiring "channel creator" privileges MUST return this error if 
 *   the client making the attempt is not a chanop on the specified channel. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 485, ERR_UNIQOPPRIVSNEEDED)
 * 
 */
public static final int ERR_UNIQOPPRIVSNEEDED = 485;


/**
 * FORMAT: ':No O-lines for your host'
 * - If a client sends an OPER message and the server has not been configured to 
 *   allow connections from the client's host as an operator, this error MUST be 
 *   returned. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 491, ERR_NOOPERHOST)
 * 
 */
public static final int ERR_NOOPERHOST = 491;


/**
 * FORMAT: ':Unknown MODE flag'
 * - Returned by the server to indicate that a MODE message was sent with a nickname 
 *   parameter and that the a mode flag sent was not recognized. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 501, ERR_UMODEUNKNOWNFLAG)
 * 
 */
public static final int ERR_UMODEUNKNOWNFLAG = 501;


/**
 * FORMAT: ':Cannot change mode for other users'
 * - No description. 
 * FROM: 'RFC-2812 [CLIENT-REV]' (as numeric 502, ERR_USERSDONTMATCH)
 * 
 */
public static final int ERR_USERSDONTMATCH = 502;

public static int RPL_CREATIONTIME = 329;
 public static int RPL_WHOISACCOUNT = 330;
}
